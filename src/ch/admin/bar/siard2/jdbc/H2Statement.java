/*======================================================================
H2Statement implements a wrapped H2 Statement.
Version     : $Id: $
Application : SIARD2
Description : H2Statement implements a wrapped H2 Statement.
Platform    : Java 7   
------------------------------------------------------------------------
Copyright  : 2016, Enter AG, RÃ¼ti ZH, Switzerland
Created    : 10.05.2016, Hartwig Thomas
======================================================================*/
package ch.admin.bar.siard2.jdbc;

import java.sql.*;

import org.h2.jdbc.*;
import ch.enterag.utils.jdbc.*;

/*====================================================================*/
/** H2Statement implements a wrapped H2 Statement.
 * @author Hartwig Thomas
 */
public class H2Statement
  extends BaseStatement
  implements Statement
{
  /*------------------------------------------------------------------*/
  /** convert an H2 JdbcSQLException into an SQLException.
   * @param jse
   * @throws SQLException
   */
  private void throwSqlException(JdbcSQLException jse)
    throws SQLException
  {
    throw new SQLException("H2 exception!", jse);
  } /* throwSqlException */
  
  /*------------------------------------------------------------------*/
  /** constructor
   * @param stmtWrapped statement to be wrapped.
   * @throws SQLException if a database error occurred.
   */
  public H2Statement(Statement stmtWrapped)
    throws SQLException
  {
    super(stmtWrapped);
  } /* constructor */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} */
  @Override
  public Connection getConnection() throws SQLException
  {
    Connection conn = null;
    try { conn = new H2Connection(super.getConnection()); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return conn;
  } /* getConnection */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc}
   * Return H2ResultSet. 
   * Convert JdbcSQLException from H2 into SQLFeatureNotSupportedError.
   */
  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    ResultSet rs = null;
    try { rs = new H2ResultSet(super.executeQuery(getConnection().nativeSQL(sql)),getConnection()); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return rs;
  } /* executeQuery */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} 
   * Convert JdbcSQLException from H2 into SQLFeatureNotSupportedError.
   */
  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    int iResult = -1;
    try { iResult = super.executeUpdate(getConnection().nativeSQL(sql)); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc}
   * Convert JdbcSQLException from H2 into SQLFeatureNotSupportedError.
   */
  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys)
      throws SQLException
  {
    int iResult = -1;
    try { iResult = super.executeUpdate(getConnection().nativeSQL(sql), autoGeneratedKeys); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} 
   * Convert JdbcSQLException from H2 into SQLFeatureNotSupportedError.
   */
  @Override
  public int executeUpdate(String sql, int[] columnIndexes)
      throws SQLException
  {
    int iResult = -1;
    try { iResult = super.executeUpdate(getConnection().nativeSQL(sql), columnIndexes); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc} 
   * Convert JdbcSQLException from H2 into SQLFeatureNotSupportedError.
   */
  @Override
  public int executeUpdate(String sql, String[] columnNames)
      throws SQLException
  {
    int iResult = -1;
    try { iResult = super.executeUpdate(getConnection().nativeSQL(sql), columnNames); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return iResult;
  } /* executeUpdate */

  /*------------------------------------------------------------------*/
  /** {@inheritDoc}
   * Return H2ResultSet. 
   * Convert JdbcSQLException from H2 into SQLFeatureNotSupportedError.
   */
  @Override
  public ResultSet getResultSet() throws SQLException
  {
    ResultSet rs = null;
    try { rs = new H2ResultSet(super.getResultSet(),getConnection()); }
    catch(JdbcSQLException jse) { throwSqlException(jse); }
    return rs;
  } /* getResultSet */

} /* H2Statement */
